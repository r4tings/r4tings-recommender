import com.github.jk1.license.filter.ExcludeTransitiveDependenciesFilter
import com.github.jk1.license.filter.LicenseBundleNormalizer
import com.github.jk1.license.render.InventoryMarkdownReportRenderer

buildscript {
    repositories {
        mavenCentral()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'com.github.jk1.dependency-license-report:com.github.jk1.dependency-license-report.gradle.plugin:2.+'
    }
}


allprojects {
    apply plugin: 'idea'
    // to share test fixture
    apply plugin: "java-library"
    apply plugin: "java-test-fixtures"
    apply plugin: 'com.github.jk1.dependency-license-report'

    repositories {
        mavenLocal()
        mavenCentral()
        google()
        gradlePluginPortal()
        maven { url "https://repo1.maven.org/maven2/" }
        maven { url "https://jitpack.io" }
    }

    group = "com.r4tings.recommender"
    description = "R4tings Recommender - Open Source Recommendation Engine"
    version = "0.0.1"


    java {
//        sourceCompatibility = JavaVersion.VERSION_1_8
        sourceCompatibility = JavaVersion.VERSION_11
//        sourceCompatibility = JavaVersion.VERSION_17
    }

}

subprojects {

    dependencies {
        /* Apache Spark */
        implementation("org.apache.spark:spark-core_$scalaBinaryVersion:$sparkVersion")
        implementation("org.apache.spark:spark-mllib_$scalaBinaryVersion:$sparkVersion")
        implementation("org.apache.spark:spark-sql_$scalaBinaryVersion:$sparkVersion")

        /* Logback Classic Module */
        implementation("ch.qos.logback:logback-classic:$logbackVersion")

        /* Lombok */
        compileOnly("org.projectlombok:lombok:$lombokVersion")
        annotationProcessor("org.projectlombok:lombok:$lombokVersion")
        testCompileOnly("org.projectlombok:lombok:$lombokVersion")
        testAnnotationProcessor("org.projectlombok:lombok:$lombokVersion")

//        /* JUnit 5 */
        testImplementation("org.junit.jupiter:junit-jupiter:$junitJupiterVersion")
        testRuntimeOnly("org.junit.platform:junit-platform-launcher")

        testImplementation("org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion")
        testImplementation("org.junit.jupiter:junit-jupiter-params:$junitJupiterVersion")

////    testImplementation("org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion")
////    testImplementation("org.junit.vintage:junit-vintage-engine:$junitVintageVersion")
//
        testImplementation("net.lingala.zip4j:zip4j:$zip4jVersion")
    }

    test {
        useJUnitPlatform()

        // jvmArgs = ['--add-exports=java.base/sun.nio=ALL-UNNAMED']


        environment("rootPath", "${project.rootDir}")
        environment("nativePath", "${project.rootDir}\\lib\\hadoop-2.8.3")

        minHeapSize = "2g"
        maxHeapSize = "16g"

        dependsOn("cleanTest")
        useJUnitPlatform()
        testLogging {
            showStandardStreams = true
            showCauses = true
            showExceptions = true
            showStackTraces = true
            exceptionFormat = 'full'
            events "passed", "skipped", "failed", "standardOut", "standardError"
        }
    }

    task copyLicenseReport(type: Copy) {
        dependsOn 'clean'
        dependsOn 'generateLicenseReport'
        from layout.buildDirectory.file("$projectDir/build/licenses/CREDITS.md")
        into layout.buildDirectory.dir("$projectDir")
    }

}

project(':recommender') {

    dependencies {

        testFixturesImplementation("org.apache.spark:spark-core_$scalaBinaryVersion:$sparkVersion")
        testFixturesImplementation("org.apache.spark:spark-mllib_$scalaBinaryVersion:$sparkVersion")
        testFixturesImplementation("org.apache.spark:spark-sql_$scalaBinaryVersion:$sparkVersion")

        testFixturesImplementation("org.junit.jupiter:junit-jupiter-params:$junitJupiterVersion")
        testFixturesImplementation("org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion")

        testFixturesImplementation 'org.projectlombok:lombok:1.18.22'
        testFixturesAnnotationProcessor 'org.projectlombok:lombok:1.18.22'
    }

    version '0.1.0-SNAPSHOT'

    jar {
        archiveBaseName = "r4tings-$project.name"
    }
    testFixturesJar {
        archiveBaseName = "r4tings-$project.name"
    }

    javadoc {
        description = "Generates aggregated Javadoc API documentation."

        title = "R4tings Recommender v$version"

        options.author = true
        options.header = "$project.name"
        // options.stylesheetFile = file("$rootDir/docs/stylesheet.css")
        options.memberLevel = JavadocMemberLevel.PROTECTED

        options.addStringOption("locale", "ko_KR");
        options.addStringOption("encoding", "UTF-8");
        options.addStringOption("charset", "UTF-8");
        options.addStringOption("docencoding", "UTF-8");

        destinationDir = file("${project.rootDir}/docs/javadoc")
        // include 'com/r4tings/recommender/**'
        exclude 'com/r4tings/recommender/common/util/**'
    }


    testFixturesJavadoc {
        options.addStringOption("locale", "ko_KR");
        options.addStringOption("encoding", "UTF-8");
        options.addStringOption("charset", "UTF-8");
        options.addStringOption("docencoding", "UTF-8");

        destinationDir = file("${project.rootDir}/docs/testFixturesjavadoc")
    }


    licenseReport {
        outputDir = "$projectDir/build/licenses"
        renderers = [new InventoryMarkdownReportRenderer('CREDITS.md', "R4tings Recommender v$version")]

        //renderers = [new InventoryMarkdownReportRenderer()]
        // 보고서에 첫 번째 수준 종속성만 표기
        filters = [new LicenseBundleNormalizer(), new ExcludeTransitiveDependenciesFilter()]
        configurations = ALL
    }

}

project(':recommender-examples') {
    dependencies {
        implementation(project(":recommender"))
        testImplementation testFixtures(project(':recommender'))
    }

    version '0.1.0-SNAPSHOT'

    jar {
        enabled = false
    }

    testFixturesJar {
        enabled = false
    }

    licenseReport {
        outputDir = "$projectDir/build/licenses"
        renderers = [new InventoryMarkdownReportRenderer('CREDITS.md', "R4tings Recommender Examples v$version")]
        //renderers = [new InventoryMarkdownReportRenderer()]
        // 보고서에 첫 번째 수준 종속성만 표기
        filters = [new LicenseBundleNormalizer(), new ExcludeTransitiveDependenciesFilter()]
        configurations = ALL
    }


}