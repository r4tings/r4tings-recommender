@startuml

skinparam defaultFontName "D2Coding ligature"
skinparam defaultFontSize 11
'skinparam linetype polyline
skinparam linetype ortho
left to right direction

'title Association Rule Mining Recommender

abstract class org.apache.spark.ml.JavaParams{
    + {abstract} Estimator copy(ParamMap extra)
    + {abstract} String uid()
}

interface com.r4tings.recommender.common.ml.param.Verbose{
    ~ BooleanParam verbose()
    ~ Boolean getVerbose()
    ~ Verbose setVerbose(Boolean value)
}

interface com.r4tings.recommender.common.ml.param.OutputCol{
    ~ Param<String> outputCol()
    ~ String getOutputCol()
    ~ OutputCol setOutputCol(String values)
}

interface com.r4tings.recommender.common.ml.param.RatingCol{
    ~ Param<String> userCol()
    ~ Param<String> itemCol()
    ~ Param<String> ratingCol()
    ~ String getUserCol()
    ~ String getItemCol()
    ~ String getRatingCol()
    ~ RatingCol setUserCol(String value)
    ~ RatingCol setItemCol(String value)
    ~ RatingCol setRatingCol(String value)
}

org.apache.spark.ml.JavaParams <|-- com.r4tings.recommender.common.ml.CommonParams

com.r4tings.recommender.common.ml.param.Verbose <|.. com.r4tings.recommender.common.ml.CommonParams
com.r4tings.recommender.common.ml.param.OutputCol <|.. com.r4tings.recommender.common.ml.CommonParams
com.r4tings.recommender.common.ml.param.RatingCol <|.[norank]. com.r4tings.recommender.common.ml.CommonParams

'org.apache.spark.ml.JavaParams .[hidden]. com.r4tings.recommender.common.ml.AbstractRecommender


abstract class com.r4tings.recommender.common.ml.CommonParams<T extends CommonParams<T>>{
    + CommonParams(String prefix)
    + Estimator copy(ParamMap extra)
    + String uid()
    + BooleanParam verbose()
    + Param<String> outputCol()
    + Param<String> userCol()
    + Param<String> itemCol()
    + Param<String> ratingCol()
    + Boolean getVerbose()
    + String getOutputCol()
    + String getUserCol()
    + String getItemCol()
    + String getRatingCol()
    + Boolean getVerbose()
    + String getOutputCol()
    + String getUserCol()
    + String getItemCol()
    + String getRatingCol()
    + T setVerbose(Boolean value)
    + T setOutputCol(String value)
    + T setUserCol(String value)
    + T setItemCol(String value)
    + T setRatingCol(String value)
    + T setCriterion(Criterion value)
    + T setCriterionCol(String value)
    + T setImputeZero(Boolean value)
    + T setIds(Object... value)
    # {abstract} T self()
}

com.r4tings.recommender.common.ml.CommonParams <|-- com.r4tings.recommender.model.knn.KNearestNeighborsParams

class com.r4tings.recommender.model.knn.KNearestNeighborsParams{
    + KNearestNeighborsParams()
    + Param<Criterion> group()
    + Param<WeightedAverage> weightedAverage()
    + Param<RatingScaler> ratingScaler()
    + Param<RatingSimilarityMeasurer> similarityMeasurer()
    + IntParam minimumNeighbors()
    + IntParam k()
    + Criterion getCriterion()
    + String getCriterionCol()
    + RatingScaler getRatingScaler()
    + RatingSimilarityMeasurer getSimilarityMeasurer()
    + Integer getMinimumNeighbors()
    + Integer getK()
    + T setCriterion(Criterion value)
    + T setCriterionCol(String value)
    + KNearestNeighborsParams setWeightedAverage(WeightedAverage value)
    + KNearestNeighborsParams setRatingScaler(RatingScaler value)
    + KNearestNeighborsParams setSimilarityMeasurer(RatingSimilarityMeasurer value)
    + KNearestNeighborsParams setMinimumNeighbors(Integer value)
    + KNearestNeighborsParams setK(Integer value)
    # T self()
}

interface com.r4tings.recommender.common.ml.param.GroupCol{
    ~ Param<Criterion> group()
    ~ Criterion getCriterion()
    ~ String getCriterionCol()
    ~ CriterionCol setCriterion(Criterion value)
    ~ CriterionCol setCriterionCol(String values)
}

com.r4tings.recommender.common.ml.param.GroupCol <|.. com.r4tings.recommender.model.knn.KNearestNeighborsParams

abstract class com.r4tings.recommender.common.ml.AbstractRecommender{
    + AbstractRecommender(CommonParams<? extends CommonParams> params)
    + Dataset<Row> recommend(Dataset<Row> ratings, int topN, Object... id)
    # {abstract} Dataset<Row> compute(Dataset<Row> ratingDS, Object[] ids)
}

com.r4tings.recommender.common.ml.AbstractRecommender o-left- com.r4tings.recommender.common.ml.CommonParams

class com.r4tings.recommender.model.knn.KNearestNeighbors{
    + KNearestNeighbors(KNearestNeighborsParams params)
    # Dataset<Row> compute(Dataset<Row> ratingDS, Object[] ids)
}

com.r4tings.recommender.common.ml.AbstractRecommender <|-- com.r4tings.recommender.model.knn.KNearestNeighbors

com.r4tings.recommender.model.knn.KNearestNeighbors o-left- com.r4tings.recommender.model.knn.KNearestNeighborsParams

enum com.r4tings.recommender.model.knn.WeightedAverage {
    SIMPLE
    MEAN_CENTERING
    Z_SCORE
    + WeightedAverage(String description)
    + {abstract} UserDefinedFunction invoke(Boolean verbose, Integer minimumNeighbors)
}




@enduml