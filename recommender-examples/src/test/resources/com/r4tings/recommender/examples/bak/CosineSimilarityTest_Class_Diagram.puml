@startuml

skinparam defaultFontName "D2Coding ligature"
skinparam defaultFontSize 11
skinparam linetype ortho
left to right direction


abstract class org.apache.spark.ml.Transformer{
    + {abstract} Dataset<Row> transform(Dataset<?> ratings)
    + {abstract} StructType transformSchema(StructType schema)
    + {abstract} Transformer copy(ParamMap extra)
    + {abstract} String uid()
}

interface com.r4tings.recommender.common.ml.param.Verbose{
    ~ BooleanParam verbose()
    ~ Boolean getVerbose()
    ~ Verbose setVerbose(Boolean value)
}

interface com.r4tings.recommender.common.ml.param.OutputCol{
    ~ Param<String> outputCol()
    ~ String getOutputCol()
    ~ OutputCol setOutputCol(String values)
}

interface com.r4tings.recommender.common.ml.param.RatingCol{
    ~ Param<String> userCol()
    ~ Param<String> itemCol()
    ~ Param<String> ratingCol()
    ~ String getUserCol()
    ~ String getItemCol()
    ~ String getRatingCol()
    ~ RatingCol setUserCol(String value)
    ~ RatingCol setItemCol(String value)
    ~ RatingCol setRatingCol(String value)
}

abstract class com.r4tings.recommender.common.ml.AbstractTransformer{
    + AbstractTransformer(String prefix)
    + StructType transformSchema(StructType schema)
    + Transformer copy(ParamMap extra)
    + String uid()
    + BooleanParam verbose()
    + Param<String> outputCol()
    + Param<String> userCol()
    + Param<String> itemCol()
    + Param<String> ratingCol()
    + Boolean getVerbose()
    + String getOutputCol()
    + String getUserCol()
    + String getItemCol()
    + String getRatingCol()
}

org.apache.spark.ml.Transformer <|-left- com.r4tings.recommender.common.ml.AbstractTransformer

com.r4tings.recommender.common.ml.param.Verbose <|.. com.r4tings.recommender.common.ml.AbstractTransformer
com.r4tings.recommender.common.ml.param.OutputCol <|.. com.r4tings.recommender.common.ml.AbstractTransformer
com.r4tings.recommender.common.ml.param.RatingCol <|.. com.r4tings.recommender.common.ml.AbstractTransformer


abstract class com.r4tings.recommender.model.measures.similarity.RatingSimilarityMeasurer<T extends RatingSimilarityMeasurer<T>>{
    + RatingSimilarityMeasurer(String prefix)
    + Dataset<Row> transform(Dataset<?> ratings)
    + Param<Criterion> group()
    + BooleanParam imputeZero()
    + Param<Object[]> ids()
    + Criterion getCriterion()
    + String getCriterionCol()
    + Boolean getImputeZero()
    + Object[] getIds()
    + T setVerbose(Boolean value)
    + T setOutputCol(String value)
    + T setUserCol(String value)
    + T setItemCol(String value)
    + T setRatingCol(String value)
    + T setCriterion(Criterion value)
    + T setCriterionCol(String value)
    + T setImputeZero(Boolean value)
    + T setIds(Object... value)
    # {abstract} T self()
    # Dataset<Row> compute(Dataset<Row> ratingDS, UserDefinedFunction similarityMeasure)
    # {abstract} Dataset<Row> calculate(Dataset<Row> ratingDS)
}

com.r4tings.recommender.common.ml.AbstractTransformer <|-left- com.r4tings.recommender.model.measures.similarity.RatingSimilarityMeasurer

interface com.r4tings.recommender.common.ml.param.GroupCol{
    ~ Param<Criterion> group()
    ~ Criterion getCriterion()
    ~ String getCriterionCol()
    ~ CriterionCol setCriterion(Criterion value)
    ~ CriterionCol setCriterionCol(String values)
}

com.r4tings.recommender.common.ml.param.GroupCol <|.[norank]. com.r4tings.recommender.model.measures.similarity.RatingSimilarityMeasurer

class com.r4tings.recommender.model.measures.similarity.CosineSimilarityMeasurer{
    + CosineSimilarityMeasurer(String prefix)
    # T self()
    # Dataset<Row> calculate(Dataset<Row> ratingDS)
}

com.r4tings.recommender.model.measures.similarity.RatingSimilarityMeasurer <|-left- com.r4tings.recommender.model.measures.similarity.CosineSimilarityMeasurer

enum com.r4tings.recommender.model.measures.similarity.SimilarityMeasure {
    COSINE
    PEARSON
    MANHATTAN
    EUCLIDEAN
    BINARY_SMC
    BINARY_JACCARD
    + SimilarityMeasure(String description)
    + {abstract} UserDefinedFunction invoke(Boolean imputeZero, Boolean verbose)
}

@enduml