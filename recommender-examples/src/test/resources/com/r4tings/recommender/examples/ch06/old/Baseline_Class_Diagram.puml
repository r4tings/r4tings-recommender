@startuml

skinparam defaultFontName "D2Coding ligature"
skinparam defaultFontSize 11
'skinparam linetype ortho
left to right direction

'title Association Rule Mining Recommender

abstract class org.apache.spark.ml.Estimator{
    + {abstract} Model fit(Dataset<?> dataset)
    + {abstract} StructType transformSchema(StructType schema)
    + {abstract} Estimator copy(ParamMap extra)
    + {abstract} String uid()
}

abstract class org.apache.spark.ml.Model{
    + {abstract} StructType transformSchema(StructType schema)
    + {abstract} Model copy(ParamMap extra)
    + {abstract} String uid()
}

abstract class org.apache.spark.ml.JavaParams{
    + {abstract} Estimator copy(ParamMap extra)
    + {abstract} String uid()
}

org.apache.spark.ml.Model .[hidden]left. org.apache.spark.ml.Estimator

interface com.r4tings.recommender.common.ml.param.Verbose{
    ~ BooleanParam verbose()
    ~ Boolean getVerbose()
    ~ Verbose setVerbose(Boolean value)
}

interface com.r4tings.recommender.common.ml.param.OutputCol{
    ~ Param<String> outputCol()
    ~ String getOutputCol()
    ~ OutputCol setOutputCol(String values)
}

interface com.r4tings.recommender.common.ml.param.RatingCol{
    ~ Param<String> userCol()
    ~ Param<String> itemCol()
    ~ Param<String> ratingCol()
    ~ String getUserCol()
    ~ String getItemCol()
    ~ String getRatingCol()
    ~ RatingCol setUserCol(String value)
    ~ RatingCol setItemCol(String value)
    ~ RatingCol setRatingCol(String value)
}

com.r4tings.recommender.common.ml.param.OutputCol .[hidden]left. com.r4tings.recommender.common.ml.param.Verbose
'com.r4tings.recommender.common.ml.param.RatingCol .[hidden]left. com.r4tings.recommender.common.ml.param.OutputCol

abstract class com.r4tings.recommender.common.ml.AbstractEstimator{
    + {abstract} StructType transformSchema(StructType schema)
    + {abstract} Estimator copy(ParamMap extra)
    + {abstract} String uid()
    + BooleanParam verbose()
    + Param<String> outputCol()
    + Param<String> userCol()
    + Param<String> itemCol()
    + Param<String> ratingCol()
    + Boolean getVerbose()
    + String getOutputCol()
    + String getUserCol()
    + String getItemCol()
    + String getRatingCol()
    + Boolean getVerbose()
    + String getOutputCol()
    + String getUserCol()
    + String getItemCol()
    + String getRatingCol()
}

abstract class com.r4tings.recommender.common.ml.AbstractModel{
    + {abstract} StructType transformSchema(StructType schema)
    + {abstract} Model copy(ParamMap extra)
    + {abstract} String uid()
    + BooleanParam verbose()
    + Param<String> outputCol()
    + Param<String> userCol()
    + Param<String> itemCol()
    + Param<String> ratingCol()
    + Boolean getVerbose()
    + String getOutputCol()
    + String getUserCol()
    + String getItemCol()
    + String getRatingCol()
    + Boolean getVerbose()
    + String getOutputCol()
    + String getUserCol()
    + String getItemCol()
    + String getRatingCol()
}

'com.r4tings.recommender.common.ml.AbstractModel .[hidden]left. com.r4tings.recommender.common.ml.AbstractEstimator


org.apache.spark.ml.Estimator <|-- com.r4tings.recommender.common.ml.AbstractEstimator
org.apache.spark.ml.Model <|---- com.r4tings.recommender.common.ml.AbstractModel


com.r4tings.recommender.common.ml.param.Verbose <|.. com.r4tings.recommender.common.ml.AbstractEstimator
com.r4tings.recommender.common.ml.param.OutputCol <|.. com.r4tings.recommender.common.ml.AbstractEstimator
com.r4tings.recommender.common.ml.param.RatingCol <|.... com.r4tings.recommender.common.ml.AbstractEstimator


com.r4tings.recommender.common.ml.param.Verbose <|.. com.r4tings.recommender.common.ml.AbstractModel
com.r4tings.recommender.common.ml.param.OutputCol <|.. com.r4tings.recommender.common.ml.AbstractModel
com.r4tings.recommender.common.ml.param.RatingCol <|.. com.r4tings.recommender.common.ml.AbstractModel


abstract class com.r4tings.recommender.common.ml.CommonEstimator<T extends CommonEstimator<T>>{
    + T setVerbose(Boolean value)
    + T setOutputCol(String value)
    + T setUserCol(String value)
    + T setItemCol(String value)
    + T setRatingCol(String value)
    + T setCriterion(Criterion value)
    + T setCriterionCol(String value)
    + T setImputeZero(Boolean value)
    + T setIds(Object... value)
    # {abstract} T self()
}

com.r4tings.recommender.common.ml.AbstractEstimator <|-- com.r4tings.recommender.common.ml.CommonEstimator

abstract class com.r4tings.recommender.common.ml.CommonModel<T extends CommonModel<T>>{
    + T setVerbose(Boolean value)
    + T setOutputCol(String value)
    + T setUserCol(String value)
    + T setItemCol(String value)
    + T setRatingCol(String value)
    + T setCriterion(Criterion value)
    + T setCriterionCol(String value)
    + T setImputeZero(Boolean value)
    + T setIds(Object... value)
    # {abstract} T self()
}

com.r4tings.recommender.common.ml.AbstractModel <|-- com.r4tings.recommender.common.ml.CommonModel


class com.r4tings.recommender.model.svd.baseline.SimpleMeanRatingBaseline{
    + SimpleMeanRatingBaseline()
    + MeanRatingBaselineModel fit(Dataset ratings)
    # T self()
}

org.apache.spark.ml.Model .[hidden]. org.apache.spark.ml.Estimator


class com.r4tings.recommender.model.svd.baseline.GeneralMeanRatingBaseline{
    + GeneralMeanRatingBaseline()
    + MeanRatingBaselineModel fit(Dataset ratings)
    + IntParam lamda1()
    + IntParam lamda2()
    + Integer getLamda1()
    + Integer getLamda2()
    + GeneralMeanRatingBaseline setLamda1(Integer value)
    + GeneralMeanRatingBaseline setLamda2(Integer value)
    # T self()
}

com.r4tings.recommender.common.ml.CommonEstimator <|-- com.r4tings.recommender.model.svd.baseline.SimpleMeanRatingBaseline

com.r4tings.recommender.common.ml.CommonEstimator <|-- com.r4tings.recommender.model.svd.baseline.GeneralMeanRatingBaseline


com.r4tings.recommender.common.ml.CommonModel <|---- com.r4tings.recommender.model.svd.baseline.MeanRatingBaselineModel


class com.r4tings.recommender.model.svd.baseline.MeanRatingBaselineModel{
    + MeanRatingBaselineModel()
    + Dataset<Row> transform(Dataset<?> ratings)
    + DoubleParam overallMeanRating()
    + Param<Dataset<Row>> userBiasDS()
    + Param<Dataset<Row>> itemBiasDS()
    + Double getOverallMeanRating()
    + Dataset<Row> getUserBiasDS()
    + Dataset<Row> getItemBiasDS()
    + MeanRatingBaselineModel setOverallMeanRating(Double value)
    + MeanRatingBaselineModel setUserBiasDS(Dataset<Row> value)
    + MeanRatingBaselineModel setItemBiasDS(Dataset<Row> value)
    # T self()
}

com.r4tings.recommender.model.svd.baseline.SimpleMeanRatingBaseline *-- com.r4tings.recommender.model.svd.baseline.MeanRatingBaselineModel

com.r4tings.recommender.model.svd.baseline.GeneralMeanRatingBaseline *-- com.r4tings.recommender.model.svd.baseline.MeanRatingBaselineModel


'params

abstract class com.r4tings.recommender.common.ml.CommonParams<T extends CommonParams<T>>{
    + CommonParams(String prefix)
    + Estimator copy(ParamMap extra)
    + String uid()
    + BooleanParam verbose()
    + Param<String> outputCol()
    + Param<String> userCol()
    + Param<String> itemCol()
    + Param<String> ratingCol()
    + Boolean getVerbose()
    + String getOutputCol()
    + String getUserCol()
    + String getItemCol()
    + String getRatingCol()
    + Boolean getVerbose()
    + String getOutputCol()
    + String getUserCol()
    + String getItemCol()
    + String getRatingCol()
    + T setVerbose(Boolean value)
    + T setOutputCol(String value)
    + T setUserCol(String value)
    + T setItemCol(String value)
    + T setRatingCol(String value)
    + T setCriterion(Criterion value)
    + T setCriterionCol(String value)
    + T setImputeZero(Boolean value)
    + T setIds(Object... value)
    # {abstract} T self()
}

org.apache.spark.ml.JavaParams <|-- com.r4tings.recommender.common.ml.CommonParams

abstract class com.r4tings.recommender.common.ml.AbstractRecommender{
    + AbstractRecommender(CommonParams<? extends CommonParams> params)
    + Dataset<Row> recommend(Dataset<Row> ratings, int topN, Object... id)
    # {abstract} Dataset<Row> compute(Dataset<Row> ratingDS, Object[] ids)
}

'org.apache.spark.ml.JavaParams .[hidden]. com.r4tings.recommender.common.ml.AbstractRecommender

'com.r4tings.recommender.common.ml.AbstractModel .[hidden]. com.r4tings.recommender.common.ml.AbstractRecommender


com.r4tings.recommender.common.ml.AbstractRecommender o-left- com.r4tings.recommender.common.ml.CommonParams

com.r4tings.recommender.common.ml.param.Verbose <|.. com.r4tings.recommender.common.ml.CommonParams
com.r4tings.recommender.common.ml.param.OutputCol <|.. com.r4tings.recommender.common.ml.CommonParams
com.r4tings.recommender.common.ml.param.RatingCol <|.. com.r4tings.recommender.common.ml.CommonParams



class com.r4tings.recommender.model.svd.BaselineSingleValueDecompositionParams{
    + BaselineSingleValueDecompositionParams()
    + Param<CommonEstimator> baselinePredictor()
    + IntParam k()
    + CommonEstimator getBaselinePredictor()
    + Integer getK()
    + BaselineSingleValueDecompositionParams setBaselinePredictor(CommonEstimator value)
    + BaselineSingleValueDecompositionParams setK(Integer value)
    # T self()
}

com.r4tings.recommender.common.ml.CommonParams <|----- com.r4tings.recommender.model.svd.BaselineSingleValueDecompositionParams

class com.r4tings.recommender.model.svd.BaselineSingleValueDecomposition{
    + BaselineSingleValueDecomposition(BaselineSingleValueDecompositionParams params)
    # Dataset<Row> compute(Dataset<Row> ratingDS, Object[] ids)
}

com.r4tings.recommender.common.ml.AbstractRecommender <|--- com.r4tings.recommender.model.svd.BaselineSingleValueDecomposition

com.r4tings.recommender.model.svd.BaselineSingleValueDecomposition o-- com.r4tings.recommender.model.svd.BaselineSingleValueDecompositionParams

'svd


class com.r4tings.recommender.model.svd.mf.SingleValueDecomposition{
    + SingleValueDecomposition()
    + SingleValueDecompositionModel fit(Dataset ratings)
    + IntParam k()
    + Integer getK()
    + SingleValueDecomposition setK(Integer value)
    # T self()
}

com.r4tings.recommender.common.ml.CommonEstimator <|--- com.r4tings.recommender.model.svd.mf.SingleValueDecomposition

class com.r4tings.recommender.model.svd.mf.SingleValueDecompositionModel{
    + SingleValueDecompositionModel()
    + {static} Double reconstructRating(WrappedArray<Double> u, WrappedArray<Double> s, WrappedArray<Double> v)
    + Param<Dataset<Row>> userFeatureDS()
    + Param<Double[]> featureWeights()
    + Param<Dataset<Row>> itemFeatureDS()
    + Dataset<Row> getUserFeatureDS()
    + Dataset<Row> getItemFeatureDS()
    + Dataset<Row> getItemBiasDS()
    + SingleValueDecompositionModel setUserFeatureDS(Dataset<Row> value)
    + SingleValueDecompositionModel setItemFeatureDS(Dataset<Row> value)
    + SingleValueDecompositionModel setFeatureWeights(double[] value)
    # T self()
}

com.r4tings.recommender.common.ml.CommonModel <|-- com.r4tings.recommender.model.svd.mf.SingleValueDecompositionModel

com.r4tings.recommender.model.svd.mf.SingleValueDecomposition *-- com.r4tings.recommender.model.svd.mf.SingleValueDecompositionModel


@enduml