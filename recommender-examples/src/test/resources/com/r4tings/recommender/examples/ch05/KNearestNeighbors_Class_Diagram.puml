@startuml

skinparam defaultFontName "D2Coding ligature"
skinparam defaultFontSize 11
skinparam shadowing false

skinparam linetype ortho
left to right direction

package org.apache.spark.ml {

    abstract class JavaParams #Wheat {
        + {abstract} Estimator copy(ParamMap extra)
        + {abstract} String uid()
    }

}

package com.r4tings.recommender.common.ml {

    package com.r4tings.recommender.common.ml.param {

        interface RatingCol{
            ~ Param<String> userCol()
            ~ Param<String> itemCol()
            ~ Param<String> ratingCol()
            ~ String getUserCol()
            ~ String getItemCol()
            ~ String getRatingCol()
            ~ RatingCol setUserCol(String value)
            ~ RatingCol setItemCol(String value)
            ~ RatingCol setRatingCol(String value)
        }

        interface OutputCol{
            ~ Param<String> outputCol()
            ~ String getOutputCol()
            ~ OutputCol setOutputCol(String values)
        }

        interface Verbose{
            ~ BooleanParam verbose()
            ~ Boolean getVerbose()
            ~ Verbose setVerbose(Boolean value)
        }

        interface CriterionCol{
            ~ Param<Criterion> group()
            ~ Criterion getCriterion()
            ~ String getCriterionCol()
            ~ CriterionCol setCriterion(Criterion value)
            ~ CriterionCol setCriterionCol(String values)
        }
    }

    abstract class CommonParams<T extends CommonParams<T>>{
        + CommonParams(String prefix)
        + Estimator copy(ParamMap extra)
        + String uid()
        + BooleanParam verbose()
        + Param<String> outputCol()
        + Param<String> userCol()
        + Param<String> itemCol()
        + Param<String> ratingCol()
        + Boolean getVerbose()
        + String getOutputCol()
        + String getUserCol()
        + String getItemCol()
        + String getRatingCol()
        + Boolean getVerbose()
        + String getOutputCol()
        + String getUserCol()
        + String getItemCol()
        + String getRatingCol()
        + T setVerbose(Boolean value)
        + T setOutputCol(String value)
        + T setUserCol(String value)
        + T setItemCol(String value)
        + T setRatingCol(String value)
        + T setCriterion(Criterion value)
        + T setCriterionCol(String value)
        + T setImputeZero(Boolean value)
        + T setIds(Object... value)
        # {abstract} T self()
    }

    abstract class AbstractRecommender{
        + AbstractRecommender(CommonParams<? extends CommonParams> params)
        + Dataset<Row> recommend(Dataset<Row> ratings, int topN, Object... id)
        # {abstract} Dataset<Row> compute(Dataset<Row> ratingDS, Object[] ids)
    }

    JavaParams <|-left- CommonParams

    OutputCol <|.. CommonParams
    Verbose <|.. CommonParams
    RatingCol <|.. CommonParams

    AbstractRecommender o-up- CommonParams

}

package com.r4tings.recommender.model.knn {

    class KNearestNeighborsParams{
        + KNearestNeighborsParams()
        + Param<Criterion> group()
        + Param<WeightedAverage> weightedAverage()
        + Param<RatingScaler> ratingScaler()
        + Param<RatingSimilarityMeasurer> similarityMeasurer()
        + IntParam minimumNeighbors()
        + IntParam k()
        + Criterion getCriterion()
        + String getCriterionCol()
        + RatingScaler getRatingScaler()
        + RatingSimilarityMeasurer getSimilarityMeasurer()
        + Integer getMinimumNeighbors()
        + Integer getK()
        + T setCriterion(Criterion value)
        + T setCriterionCol(String value)
        + KNearestNeighborsParams setWeightedAverage(WeightedAverage value)
        + KNearestNeighborsParams setRatingScaler(RatingScaler value)
        + KNearestNeighborsParams setSimilarityMeasurer(RatingSimilarityMeasurer value)
        + KNearestNeighborsParams setMinimumNeighbors(Integer value)
        + KNearestNeighborsParams setK(Integer value)
        # T self()
    }

    class KNearestNeighbors{
        + KNearestNeighbors(KNearestNeighborsParams params)
        # Dataset<Row> compute(Dataset<Row> ratingDS, Object[] ids)
    }

    enum WeightedAverage {
        SIMPLE
        MEAN_CENTERING
        Z_SCORE
        + WeightedAverage(String description)
        + {abstract} UserDefinedFunction invoke(Boolean verbose, Integer minimumNeighbors)
    }


    KNearestNeighbors o-up- KNearestNeighborsParams

    CommonParams <|-left- KNearestNeighborsParams
    CriterionCol <|.. KNearestNeighborsParams

    AbstractRecommender <|-- KNearestNeighbors
    WeightedAverage <.left. KNearestNeighbors


}

'com.r4tings.recommender.common.ml.param -[hidden]- com.r4tings.recommender.model.knn


@enduml