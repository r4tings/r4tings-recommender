@startuml

scale 1

skinparam defaultFontName "D2Coding ligature"
skinparam defaultFontSize 11
skinparam shadowing false
skinparam classAttributeIconSize 0

skinparam linetype ortho
left to right direction

package org.apache.spark.ml {
    abstract class Transformer #Wheat {
        + {abstract} Dataset<Row> transform(Dataset<?> ratings)
        + {abstract} StructType transformSchema(StructType schema)
        + {abstract} Transformer copy(ParamMap extra)
        + {abstract} String uid()
    }
}

package com.r4tings.recommender.common.ml {

    package com.r4tings.recommender.common.ml.param {

        interface RatingCol{
            ~ Param<String> userCol()
            ~ Param<String> itemCol()
            ~ Param<String> ratingCol()
            ~ String getUserCol()
            ~ String getItemCol()
            ~ String getRatingCol()
            ~ RatingCol setUserCol(String value)
            ~ RatingCol setItemCol(String value)
            ~ RatingCol setRatingCol(String value)
        }

        interface Verbose{
            ~ BooleanParam verbose()
            ~ Boolean getVerbose()
            ~ Verbose setVerbose(Boolean value)
        }

        interface OutputCol{
            ~ Param<String> outputCol()
            ~ String getOutputCol()
            ~ OutputCol setOutputCol(String values)
        }

        interface CriterionCol{
            ~ Param<Criterion> group()
            ~ Criterion getCriterion()
            ~ String getCriterionCol()
            ~ CriterionCol setCriterion(Criterion value)
            ~ CriterionCol setCriterionCol(String values)
        }
    }

    abstract class AbstractTransformer{
        + AbstractTransformer(String prefix)
        + StructType transformSchema(StructType schema)
        + Transformer copy(ParamMap extra)
        + String uid()
        + BooleanParam verbose()
        + Param<String> outputCol()
        + Param<String> userCol()
        + Param<String> itemCol()
        + Param<String> ratingCol()
        + Boolean getVerbose()
        + String getOutputCol()
        + String getUserCol()
        + String getItemCol()
        + String getRatingCol()
    }

    Verbose <|.. AbstractTransformer
    OutputCol <|.. AbstractTransformer
    RatingCol <|.. AbstractTransformer

}

    Transformer <|-left- AbstractTransformer

package com.r4tings.recommender.model.measures.similarity {

    abstract class RatingSimilarityMeasurer<T extends RatingSimilarityMeasurer<T>>{
        + RatingSimilarityMeasurer(String prefix)
        + Dataset<Row> transform(Dataset<?> ratings)
        + Param<Criterion> group()
        + BooleanParam imputeZero()
        + Param<Object[]> ids()
        + Criterion getCriterion()
        + String getCriterionCol()
        + Boolean getImputeZero()
        + Object[] getIds()
        + T setVerbose(Boolean value)
        + T setOutputCol(String value)
        + T setUserCol(String value)
        + T setItemCol(String value)
        + T setRatingCol(String value)
        + T setCriterion(Criterion value)
        + T setCriterionCol(String value)
        + T setImputeZero(Boolean value)
        + T setIds(Object... value)
        # {abstract} T self()
        # {abstract} Dataset<Row> execute(Dataset<Row> ratingDS)
        # Dataset<Row> compute(Dataset<Row> ratingDS, UserDefinedFunction similarityMeasure)
    }

    class CosineSimilarityMeasurer{
        + CosineSimilarityMeasurer(String prefix)
        # T self()
        # Dataset<Row> execute(Dataset<Row> ratingDS)
    }


    enum SimilarityMeasure {
        COSINE
        PEARSON
        MANHATTAN
        EUCLIDEAN
        BINARY_SMC
        BINARY_JACCARD
        + SimilarityMeasure(String description)
        + {abstract} UserDefinedFunction invoke(Boolean imputeZero, Boolean verbose)
    }

    AbstractTransformer <|-- RatingSimilarityMeasurer
    CriterionCol <|.. RatingSimilarityMeasurer
    RatingSimilarityMeasurer <|-left- CosineSimilarityMeasurer
    SimilarityMeasure <.right. CosineSimilarityMeasurer


}

com.r4tings.recommender.common.ml.param -[hidden]- com.r4tings.recommender.model.measures.similarity

@enduml