@startuml

skinparam defaultFontName "D2Coding ligature"
skinparam defaultFontSize 11
skinparam shadowing false

skinparam linetype ortho
left to right direction

package org.apache.spark.ml {
    abstract class Transformer #Wheat {
        + {abstract} Dataset<Row> transform(Dataset<?> ratings)
        + {abstract} StructType transformSchema(StructType schema)
        + {abstract} Transformer copy(ParamMap extra)
        + {abstract} String uid()
    }
}

package com.r4tings.recommender.common.ml {

    package com.r4tings.recommender.common.ml.param {

        interface RatingCol{
            ~ Param<String> userCol()
            ~ Param<String> itemCol()
            ~ Param<String> ratingCol()
            ~ String getUserCol()
            ~ String getItemCol()
            ~ String getRatingCol()
            ~ RatingCol setUserCol(String value)
            ~ RatingCol setItemCol(String value)
            ~ RatingCol setRatingCol(String value)
        }

        interface OutputCol{
            ~ Param<String> outputCol()
            ~ String getOutputCol()
            ~ OutputCol setOutputCol(String values)
        }

        interface Verbose{
            ~ BooleanParam verbose()
            ~ Boolean getVerbose()
            ~ Verbose setVerbose(Boolean value)
        }

        interface GroupCol{
            ~ Param<Group> group()
            ~ Group getGroup()
            ~ String getGroupCol()
            ~ GroupCol setGroup(Group value)
            ~ GroupCol setGroupCol(String values)
        }
    }

    abstract class AbstractRatingTransformer{
        + AbstractRatingTransformer(String prefix)
        + StructType transformSchema(StructType schema)
        + Transformer copy(ParamMap extra)
        + String uid()
        + BooleanParam verbose()
        + Param<String> outputCol()
        + Param<String> userCol()
        + Param<String> itemCol()
        + Param<String> ratingCol()
        + Boolean getVerbose()
        + String getOutputCol()
        + String getUserCol()
        + String getItemCol()
        + String getRatingCol()
    }

    OutputCol <|.. AbstractRatingTransformer
    Verbose <|.. AbstractRatingTransformer
    RatingCol <|.. AbstractRatingTransformer

}

    Transformer <|-left- AbstractRatingTransformer


package com.r4tings.recommender.data.normalize {

    abstract class RatingNormalizer<T extends RatingNormalizer<T>>{
        + RatingNormalizer(String prefix)
        + Dataset<Row> transform(Dataset<?> ratings)
        + Param<Group> group()
        + Group getGroup()
        + String getGroupCol()
        + T setVerbose(Boolean value)
        + T setOutputCol(String value)
        + T setUserCol(String value)
        + T setItemCol(String value)
        + T setRatingCol(String value)
        + T setGroup(Group value)
        + T setGroupCol(String value)
        # {abstract} T self()
        # {abstract} Dataset<Row> compute(Dataset<Row> ratingDS)
        # {abstract} Dataset<Row> compute(Dataset<Row> ratingDS, String GroupCol)
    }

    class ZScoreNormalizer{
        + ZScoreNormalizer()
        # ZScoreNormalizer self()
        # Dataset<Row> compute(Dataset<Row> ratingDS)
        # Dataset<Row> compute(Dataset<Row> ratingDS, String GroupCol)
    }

    enum NormalizeMethod {
        MEAN_CENTERING
        'MEAN_CENTERING_INVERSE
        Z_SCORE
        'Z_SCORE_INVERSE
        MIN_MAX
        'MIN_MAX_INVERSE
        DECIMAL_SCALING
        'DECIMAL_SCALING_INVERSE
        BINARY_THRESHOLDING
        + NormalizeMethod(String description)
        + {abstract} UserDefinedFunction invoke(Boolean verbose)
    }

    AbstractRatingTransformer <|-down- RatingNormalizer
    GroupCol <|.. RatingNormalizer
    RatingNormalizer <|-left- ZScoreNormalizer
    NormalizeMethod <.right. ZScoreNormalizer

}

com.r4tings.recommender.common.ml.param <-[hidden]- com.r4tings.recommender.data.normalize

@enduml